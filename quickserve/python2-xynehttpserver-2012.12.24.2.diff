diff --git a/python2-xynehttpserver-2012.12.24.2/XyneHTTPServer.py b/python2-xynehttpserver-2012.12.24.2.new/XyneHTTPServer.py
index 5d62071..285b54f 100644
--- a/python2-xynehttpserver-2012.12.24.2/XyneHTTPServer.py
+++ b/python2-xynehttpserver-2012.12.24.2.new/XyneHTTPServer.py
@@ -18,7 +18,7 @@
 
 import errno, os.path, socket, ssl, sys
 import BaseHTTPServer
-from SocketServer import ThreadingMixIn
+from SocketServer import ThreadingMixIn, ForkingMixIn
 from hashlib import md5
 from mimetypes import guess_type
 from optparse import OptionParser, OptionGroup
@@ -338,19 +338,14 @@ class BaseHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
 
   # Convenience method for transfering files and file headers.
   def transfer_file(self, fpath, include_body=True):
-    self.send_response(200)
     size = os.path.getsize(fpath)
     range_start = 0
     range_end = size
     mimetype, encoding = guess_type(fpath)
     if not mimetype:
       mimetype = 'application/octet-stream'
-    self.send_header('Content-Type', mimetype)
 
-    if encoding:
-      self.send_header('Content-Encoding', encoding)
-
-    self.send_header('Accept-Ranges', 'bytes')
+    el = 0
 
     if 'Range' in self.headers:
       s, e = self.headers['range'][6:].split('-', 1)
@@ -369,10 +364,25 @@ class BaseHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
         if ei < size:
           range_start = size - ei
 
+    if el > 0:
+        self.send_response(200)
+    else:
+        self.send_response(206)
+
+    self.send_header('Content-Type', mimetype)
+
+    if encoding:
+      self.send_header('Content-Encoding', encoding)
+
+    self.send_header('Accept-Ranges', 'bytes')
+
     self.send_header('Content-Range', 'bytes ' + str(range_start) + '-' + str(range_end - 1) + '/' + str(size))
     self.send_header('Content-Length', range_end - range_start)
     self.end_headers()
 
+    d = ''
+    wfile = self.wfile
+
     if include_body:
       f = open(fpath, 'rb')
       f.seek(range_start, 0)
@@ -382,15 +392,16 @@ class BaseHTTPRequestHandler(BaseHTTPServer.BaseHTTPRequestHandler):
         if range_start + step > range_end:
           step = range_end - range_start
         try:
-          self.wfile.write( f.read(step) )
-        except:
+          d = f.read(step) 
+          wfile.write(d)
+        except Exception, e:
+          print 'Connection closed:', e
           break
-        total += step
-        range_start += step
+        total += len(d)
+        range_start += len(d)
       f.close()
 
-
-
+    wfile.close()
 
 
   def local_redirect(self, path='/', response_code=303, message=None):
